using System.Collections.Generic;
using Cinemachine;
using Google.Protobuf.Protocol;
using TMPro;
using UnityEngine;
using UnityEngine.EventSystems;

public class TownManager : MonoBehaviour
{
    private static TownManager _instance;
    public static TownManager Instance => _instance;

    [SerializeField] private CinemachineFreeLook freeLook;
    [SerializeField] private Transform spawnArea;
    [SerializeField] private EventSystem eSystem;
    [SerializeField] private UIStart uiStart;
    [SerializeField] private UIAnimation uiAnimation;
    [SerializeField] private UIChat uiChat;
    [SerializeField] private TMP_Text txtServer;

    private const string DefaultPlayerPath = "Player/Player1";

    public CinemachineFreeLook FreeLook => freeLook;
    public EventSystem E_System => eSystem;
    public UIChat UiChat => uiChat;

    private Dictionary<int, Player> playerList = new();
    private Dictionary<int, string> playerDb = new();

    public Player MyPlayer { get; private set; }

    private void Awake()
    {
        if (_instance == null)
        {
            _instance = this;
        }
        else
        {
            Destroy(gameObject);
            return;
        }

        InitializePlayerDatabase();
    }

    private void Start()
    {
        if (!GameManager.Network.IsConnected)
        {
            uiStart.gameObject.SetActive(true);
        }
        else
        {
            Connected();
        }
    }

    private void InitializePlayerDatabase()
    {
        playerDb[1001] = "Player/Player1";
        playerDb[1002] = "Player/Player2";
        playerDb[1003] = "Player/Player3";
        playerDb[1004] = "Player/Player4";
        playerDb[1005] = "Player/Player5";
    }

    public void GameStart(string gameServer, string port, string userName, int classIdx)
    {
        GameManager.Network.Init(gameServer, port);
        GameManager.Instance.UserName = userName;
        GameManager.Instance.ClassIdx = classIdx + 1001;
        txtServer.text = gameServer;
    }

    public void Connected()
    {
        var enterPacket = new C_RegisterRequest
        {
            //여기에 이메일 연결 
            Email = "aaaaaaa",
            Nickname = GameManager.Instance.UserName,
            //여기에 비밀번호 연결
            Password = "aaaaaaaa"
        };

        GameManager.Network.Send(enterPacket);
        /*var enterPacket = new C_Enter
        {
            Nickname = GameManager.Instance.UserName,
            Class = GameManager.Instance.ClassIdx
        };

        GameManager.Network.Send(enterPacket);*/
    }

    /* 임시로 만든 보내는 메서드 들 */
    // 해야할 일 패킷에 들어갈 매개변수로 받거나 다른곳에서 받아오는 형식으로 보낼 패킷 짜기 
    public void Register()
    {
        var enterPacket = new C_RegisterRequest
        {
            //여기에 이메일 연결 
            Email = "",
            Nickname = GameManager.Instance.UserName,
            //여기에 비밀번호 연결
            Password = ""
        };

        GameManager.Network.Send(enterPacket);
    }
    public void Login()
    {
        var enterPacket = new C_LoginRequest
        {
            //여기에 이메일 연결 
            Email = "",
            //여기에 비밀번호 연결
            Password = ""
        };

        GameManager.Network.Send(enterPacket);
    }
    public void SelectCharacterRequest()
    {

    }
    public void Move()
    {

    }
    public void Animation()
    {

    }
    public void Chat()
    {

    }
    public void BuyItemRequest()
    {

    }
    public void EquipItemRequest()
    {

    }
    public void DisrobeItemRequest()
    {

    }
    public void ActiveItemRequest()
    {

    }
    public void PartyRequest()
    {

    }
    public void EnterDungeon()
    {

    }
    /* 여기까지 */

    /* 임시로 만든 받는 메서드 들 */
    // 핸들러와 연결후 각각 필요한 기능 구현 
    
    // 회원가입 확인 메세지 출력정도.
    public void RegisterResponse()
    {

    }
    // 로그인 확인후 다음 캐릭터 선택창으로 이동 구현
    public void LoginResponse()
    {

    }
    // 다른 플레이어들 들어오면 생성해주기 // 아래 spanwn 함수 사용하면 아마 구현
    public void Enter(PlayerInfo playerData)
    {
        Spawn(playerData);
    }
    // 내가 마을에 참가하면 for문이든 반복문이든 돌리면서 생성해주기.
    public void AllSpawn(List<PlayerInfo> playerDatas)
    {
        foreach (PlayerInfo player in playerDatas)
        {
            Spawn(player);
        }
        
    }
    // 나가면 삭제해주기 
    public void Despawn()
    {

    }
    //아마 아이디 받은뒤 해당 player 움직여 주는걸로 압니다.
    public void AllMove()
    {

    }
    //아마 아이디 받은뒤 해당 id player 애니메이션 
    public void AllAnimation()
    {

    }
    // 채팅 받아오기
    public void ChatResponse()
    {

    }
    //  주말 목표 입니다람쥐

    // 아이템 사는거 응답 처리
    public void BuyItemResponse()
    {

    }
    // 아이템 장착 응답 처리
    public void EquipItemResponse()
    {

    }
    // 아이템 탈착 응답 처리
    public void DisrobeItemResponse()
    {

    }
    // 소비 장착 응답 처리
    public void ActiveItemeResponse()
    {

    }
    // 파티 응답 처리
    public void PartyResponse()
    {

    }
    // 던전 쪽 추후 추가 예정
    /* 여기까지 */
    public void Spawn(PlayerInfo playerInfo)
    {
        Vector3 spawnPos = CalculateSpawnPosition(playerInfo.Transform);

        MyPlayer = CreatePlayer(playerInfo, spawnPos);
        MyPlayer.SetIsMine(true);

        ActivateGameUI();
    }

    private Vector3 CalculateSpawnPosition(TransformInfo transformInfo)
    {
        Vector3 spawnPos = spawnArea.position;
        spawnPos.x += transformInfo.PosX;
        spawnPos.z += transformInfo.PosZ;
        return spawnPos;
    }

    public Player CreatePlayer(PlayerInfo playerInfo, Vector3 spawnPos)
    {
        string playerResPath = playerDb.GetValueOrDefault(playerInfo.Class, DefaultPlayerPath);
        Player playerPrefab = Resources.Load<Player>(playerResPath);

        var player = Instantiate(playerPrefab, spawnPos, Quaternion.identity);
        player.Move(spawnPos, Quaternion.identity);
        player.SetPlayerId(playerInfo.PlayerId);
        player.SetNickname(playerInfo.Nickname);

        if (playerList.TryGetValue(playerInfo.PlayerId, out var existingPlayer))
        {
            playerList[playerInfo.PlayerId] = player;
            Destroy(existingPlayer.gameObject);
        }
        else
        {
            playerList.Add(playerInfo.PlayerId, player);
        }

        return player;
    }

    public void ReleasePlayer(int playerId)
    {
        if (!playerList.TryGetValue(playerId, out var player)) return;

        playerList.Remove(playerId);
        Destroy(player.gameObject);
    }

    private void ActivateGameUI()
    {
        uiStart.gameObject.SetActive(false);
        uiChat.gameObject.SetActive(true);
        uiAnimation.gameObject.SetActive(true);
    }

    public Player GetPlayerAvatarById(int playerId)
    {
        return playerList.TryGetValue(playerId, out var player) ? player : null;
    }
}